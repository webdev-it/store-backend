const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
const app = express();
const PORT = 3000;

// ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º CORS (–Ω–∞ GitHub Pages —É–∫–∞–∂–∏ —Å–≤–æ–π URL –≤–º–µ—Å—Ç–æ *)
app.use(cors({
  origin: '*', // üîÅ –õ—É—á—à–µ: 'https://yourusername.github.io'
}));

// üì¶ Middleware
app.use(bodyParser.json());

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ JSON-—Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
const PRODUCTS_FILE = './products.json';
const FAVORITES_FILE = './favorites.json';

function readJSON(file, fallback) {
  try {
    if (!fs.existsSync(file)) fs.writeFileSync(file, JSON.stringify(fallback));
    const data = fs.readFileSync(file);
    return JSON.parse(data);
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, err);
    return fallback;
  }
}

function writeJSON(file, data) {
  fs.writeFileSync(file, JSON.stringify(data, null, 2));
}

// ======= üîπ –†–û–£–¢–´: /products =========

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
app.get('/products', (req, res) => {
  res.setHeader('Content-Type', 'application/json');
  const products = readJSON(PRODUCTS_FILE, []);
  res.json(products);
});

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
app.post('/products', (req, res) => {
  const products = readJSON(PRODUCTS_FILE, []);
  const newProduct = req.body;

  if (!newProduct.name || newProduct.price === undefined || newProduct.price === null || newProduct.category === undefined || newProduct.category === null || newProduct.category === "") {
    return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
  }

  newProduct.id = Date.now().toString();
  products.push(newProduct);
  writeJSON(PRODUCTS_FILE, products);

  res.status(201).json(newProduct);
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
app.delete('/products/:id', (req, res) => {
  const products = readJSON(PRODUCTS_FILE, []);
  const id = req.params.id;
  const filtered = products.filter(p => p.id !== id);

  if (filtered.length === products.length) {
    return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  writeJSON(PRODUCTS_FILE, filtered);
  res.json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω' });
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
app.put('/products/:id', (req, res) => {
  const products = readJSON(PRODUCTS_FILE, []);
  const id = req.params.id;
  const updated = req.body;

  const index = products.findIndex(p => p.id === id);
  if (index === -1) {
    return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  products[index] = { ...products[index], ...updated, id };
  writeJSON(PRODUCTS_FILE, products);

  res.json(products[index]);
});

// ======= üîπ –†–û–£–¢–´: /favorites =========

// –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/favorites/:userId', (req, res) => {
  res.setHeader('Content-Type', 'application/json');
  const favorites = readJSON(FAVORITES_FILE, {});
  res.json(favorites[req.params.userId] || []);
});

// –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
app.post('/favorites/:userId', (req, res) => {
  const { productId } = req.body;
  if (!productId) return res.status(400).json({ error: 'productId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });

  const favorites = readJSON(FAVORITES_FILE, {});
  const userId = req.params.userId;
  if (!favorites[userId]) favorites[userId] = [];

  if (favorites[userId].includes(productId)) {
    return res.status(400).json({ error: '–¢–æ–≤–∞—Ä —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º' });
  }

  favorites[userId].push(productId);
  writeJSON(FAVORITES_FILE, favorites);
  res.status(201).json({ message: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' });
});

// –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
app.delete('/favorites/:userId/:productId', (req, res) => {
  const userId = req.params.userId;
  const productId = req.params.productId;
  const favorites = readJSON(FAVORITES_FILE, {});

  if (!favorites[userId] || !favorites[userId].includes(productId)) {
    return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º' });
  }

  favorites[userId] = favorites[userId].filter(id => id !== productId);
  writeJSON(FAVORITES_FILE, favorites);
  res.json({ message: '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' });
});

// ======= üîπ –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê =========
app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://store-backend-zpkh.onrender.com`);
});


const CATEGORIES_FILE = './categories.json';

function readCategories() {
  if (!fs.existsSync(CATEGORIES_FILE)) {
    fs.writeFileSync(CATEGORIES_FILE, '[]');
  }
  const data = fs.readFileSync(CATEGORIES_FILE);
  return JSON.parse(data);
}

function saveCategories(categories) {
  fs.writeFileSync(CATEGORIES_FILE, JSON.stringify(categories, null, 2));
}

app.get('/categories', (req, res) => {
  const categories = readCategories();
  res.json(categories);
});
app.post('/categories', (req, res) => {
  const categories = readCategories();
  const newCategory = req.body;

  if (!newCategory.name) {
    return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
  if (categories.some(cat => cat.name.toLowerCase() === newCategory.name.toLowerCase())) {
    return res.status(409).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
  }

  newCategory.id = Date.now().toString();
  categories.push(newCategory);
  saveCategories(categories);

  res.status(201).json(newCategory);
});

// –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ id
app.delete('/categories/:id', (req, res) => {
  const categories = readCategories();
  const id = req.params.id;
  const filtered = categories.filter(c => c.id !== id);
  if (filtered.length === categories.length) {
    return res.status(404).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  saveCategories(filtered);

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
  const products = readJSON(PRODUCTS_FILE, []);
  const productsFiltered = products.filter(p => p.category !== id);
  writeJSON(PRODUCTS_FILE, productsFiltered);

  res.json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã' });
});

const uploadRouter = require('./upload');
app.use('/upload', uploadRouter);
app.use('/images', express.static(path.join(__dirname, '../miniappdlaprodazhi/images')));
